name: Test & Build

on:
  pull_request:
    branches:
      - stable
  push:
    branches:
      - stable

jobs:
  main:
    runs-on: macos-latest

    steps:

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "18.x"

      - name: Decode Certificate and Provisioning Profile
        run: |
          echo "${{ secrets.IOS_P12 }}" | base64 --decode > cert.p12
          echo "${{ secrets.IOS_MOBILE_PROVISION }}" | base64 --decode > profile.mobileprovision

      - name: Create and Unlock Keychain
        run: |
          KEYCHAIN=build.keychain
          security create-keychain -p "" $KEYCHAIN
          security import cert.p12 -k $KEYCHAIN -P "${{ secrets.IOS_P12_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s $KEYCHAIN
          security default-keychain -s $KEYCHAIN
          security unlock-keychain -p "" $KEYCHAIN
          security set-keychain-settings $KEYCHAIN

      - name: Authenticate with Apple
        run: |
          # Sign in to Apple so Xcode can fetch provisioning profiles
          xcrun notarytool store-credentials "AC_PASSWORD" \
            --apple-id "${{ secrets.APPLE_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}"

      - name: Install Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Verify Apple credentials stored
        run: |
          xcodebuild -showBuildSettings -allowProvisioningUpdates

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.29.2

      - name: Get Flutter packages
        run: |
          flutter pub get

#      - name: Check for lints
#        run: |
#          flutter analyze

#      - name: Run all tests
#        run: |
#          flutter test

      - name: Build app bundle
        run: |
          flutter build appbundle --release

      - name: Flutter build ipa
        run: |
          flutter build ipa --release --no-codesign

      - name: Compress Archives and IPAs
        run: |
          cd build
          tar -czf ios_build.tar.gz ios

      - name: Sign app bundle
        id: sign_app
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: build/app/outputs/bundle/release
          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
          alias: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ANDROID_KEYSTORE_ALIAS_PASSWORD }}
        env:
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Archive with Xcode
        run: |
          xcodebuild -workspace ios/Runner.xcworkspace \
            -scheme Runner \
            -sdk iphoneos \
            -configuration Release \
            archive -archivePath build/Runner.xcarchive \
            -allowProvisioningUpdates \
            "DEVELOPMENT_TEAM=${{ secrets.APPLE_TEAM_ID }}"

      - name: Export IPA
        run: |
          xcodebuild -exportArchive \
            -archivePath build/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build \
            -allowProvisioningUpdates

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            ${{steps.sign_app.outputs.signedReleaseFile}}
            build/ios_build.tar.gz
      - name: Upload to TestFlight
        if: success()
        run: |
          xcrun altool --upload-app \
            -t ios \
            -f build/Runner.ipa \
            -u "${{ secrets.APPLE_ID }}" \
            -p "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}"