name: Test & Build

on:
  pull_request:
    branches:
      - stable
  push:
    branches:
      - stable

jobs:
  main:
    runs-on: macos-latest

    steps:
      - uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: latest
      - name: Check Xcode Version
        run: |
          echo "Xcode path: $(xcode-select -p)"
          xcodebuild -version
          xcode-select -p
          xcrun --sdk iphoneos --show-sdk-version

      - name: Clone repository
        uses: actions/checkout@v4

      - name: Setup java
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: "18.x"

      - name: Decode Certificate and Provisioning Profile
        run: |
          echo "${{ secrets.IOS_P12 }}" | base64 --decode > cert.p12
          echo "${{ secrets.IOS_MOBILE_PROVISION }}" | base64 --decode > profile.mobileprovision

      - name: Create and Unlock Keychain
        run: |
          KEYCHAIN=build.keychain
          security create-keychain -p "" $KEYCHAIN
          security set-keychain-settings -lut 21600
          security unlock-keychain -p "" $KEYCHAIN
          security import cert.p12 -k $KEYCHAIN -P "${{ secrets.IOS_P12_PASSWORD }}" -T /usr/bin/codesign
          security list-keychains -s $KEYCHAIN $(security list-keychains | tr -d '"')
          security default-keychain -s $KEYCHAIN
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "" $KEYCHAIN
          security find-identity -p codesigning -v

      - name: Install Provisioning Profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          UUID=$(grep -A1 UUID -a profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          cp profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$UUID.mobileprovision
          ls -alh ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Save Play Store JSON
        run: echo "${{ secrets.PLAY_STORE_JSON }}" | base64 --decode > android/playstore-key.json

      - name: Validate Play Store JSON keys
        run: |
          required_keys=(type project_id private_key client_email)
          for key in "${required_keys[@]}"; do
            if ! jq -e ".${key}" android/playstore-key.json >/dev/null; then
              echo "❌ Missing required key: $key"
              exit 1
            fi
          done

      - name: Validate iOS Signing Setup
        shell: bash
        env:
          IOS_P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
        run: |
          set -euo pipefail

          P12=cert.p12
          PROVISION=profile.mobileprovision
          PASS="$IOS_P12_PASSWORD"

          echo "🔍 Checking provisioning profile and certificate…"

          # Decode .mobileprovision into XML plist
          security cms -D -i "$PROVISION" -o profile.plist

          # Extract Team ID
          TEAM_ID=$(plutil -extract TeamIdentifier.0 xml1 -o - profile.plist | \
            xmllint --xpath 'string(//string)' -)

          # Extract application identifier (includes Team ID)
          APP_ID=$(plutil -extract Entitlements.application-identifier xml1 -o - profile.plist | \
            xmllint --xpath 'string(//string)' -)

          # Strip Team ID prefix from bundle ID
          BUNDLE_ID_PROFILE="${APP_ID#${TEAM_ID}.}"

          # Extract the first Developer Certificate from the profile and print subject
          CERT_DATA=$(plutil -extract DeveloperCertificates.0 raw -o - profile.plist)
          echo "$CERT_DATA" | base64 --decode > embedded_cert.der
          PROFILE_CERT_SUBJECT=$(openssl x509 -inform der -in embedded_cert.der -noout -subject)

          # Extract the certificate subject from the .p12
          P12_CERT_SUBJECT=$(openssl pkcs12 -in "$P12" -clcerts -nokeys \
            -passin pass:"$PASS" | openssl x509 -noout -subject)
          
          # Get bundle ID from Info.plist
          INFO_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" ios/Runner/Info.plist)

          echo "Provisioning Profile Team ID: $TEAM_ID"
          echo "Provisioning Profile Bundle ID: $BUNDLE_ID_PROFILE"
          echo "Info.plist Bundle ID: $INFO_BUNDLE_ID"
          echo "Profile Certificate Subject: $PROFILE_CERT_SUBJECT"
          echo "P12 Certificate Subject: $P12_CERT_SUBJECT"

          # Compare
          if [[ "$PROFILE_CERT_SUBJECT" != "$P12_CERT_SUBJECT" ]]; then
            echo "❌ ERROR: The .p12 certificate does not match the provisioning profile!"
            exit 1
          fi

          if [[ "$BUNDLE_ID_PROFILE" != "$INFO_BUNDLE_ID" ]]; then
            echo "❌ ERROR: The provisioning profile bundle ID does not match Info.plist!"
            exit 1
          fi

          echo "✅ All signing assets match (Team ID, certificate, and bundle ID)."
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          flutter-version: 3.29.2

      - name: Read base version from pubspec.yaml
        id: version
        run: |
          VERSION_LINE=$(grep '^version:' pubspec.yaml)
          BASE=$(echo $VERSION_LINE | cut -d'+' -f1 | cut -d':' -f2 | xargs)
          echo "base_version=$BASE" >> $GITHUB_OUTPUT

      - name: Update Info.plist version
        run: |
          /usr/libexec/PlistBuddy -c "Set :CFBundleShortVersionString ${{ steps.version.outputs.base_version }}" ios/Runner/Info.plist
          /usr/libexec/PlistBuddy -c "Set :CFBundleVersion ${{ github.run_number }}" ios/Runner/Info.plist

      - name: Get Flutter packages
        run: |
          flutter pub get

      - name: Check for lints
        run: |
          flutter analyze

      - name: Run all tests
        run: |
          flutter test

      - name: Build IPA
        env:
          KEYCHAIN: build.keychain
        run: |
          flutter build ipa --release --export-options-plist=ios/ExportOptions.plist --no-codesign \
            --build-name=${{ steps.version.outputs.base_version }} \
            --build-number=${{ github.run_number }}

      - name: Codesign
        run: |
          xcodebuild -exportArchive \
            -archivePath build/ios/archive/Runner.xcarchive \
            -exportOptionsPlist ios/ExportOptions.plist \
            -exportPath build/ios/ipa \
            OTHER_CODE_SIGN_FLAGS="--timestamp=none" \
            -verbose
          ls -alh build/ios/ipa

      - name: Create tar.gz of iOS build
        run: |
          mkdir -p build
          tar -czvf build/ios_build.tar.gz -C build ios

      # 🔑 Decode and save keystore
      - name: Decode keystore
        run: echo "${{ secrets.ANDROID_SIGNING_KEY }}" | base64 --decode > android/app/my-release-key.jks

      - name: Create key.properties
        run: |
          echo "storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.ANDROID_KEYSTORE_ALIAS_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.ANDROID_KEYSTORE_ALIAS }}" >> android/key.properties
          echo "storeFile=../app/my-release-key.jks" >> android/key.properties

      - name: Build app bundle
        run: |
          flutter build appbundle --release \
            --build-name=${{ steps.version.outputs.base_version }} \
            --build-number=${{ github.run_number }}

#      - name: Sign app bundle
#        id: sign_app
#        uses: r0adkll/sign-android-release@v1
#        with:
#          releaseDirectory: build/app/outputs/bundle/release
#          signingKeyBase64: ${{ secrets.ANDROID_SIGNING_KEY }}
#          alias: ${{ secrets.ANDROID_KEYSTORE_ALIAS }}
#          keyStorePassword: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
#          keyPassword: ${{ secrets.ANDROID_KEYSTORE_ALIAS_PASSWORD }}
#        env:
#          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: |
            ${{steps.sign_app.outputs.signedReleaseFile}}
            build/ios_build.tar.gz

      - name: Upload to TestFlight
        if: success()
        run: |
          xcrun altool --upload-app \
            -t ios \
            -f build/ios/ipa/prova3.ipa \
            -u "${{ secrets.APPLE_ID }}" \
            -p "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}"

      - name: Upload to Play Store
        run: ./gradlew publishReleaseBundle
        working-directory: android